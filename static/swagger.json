{
  "openapi": "3.0.0",
  "info": {
    "description": "Hexacom-api",
    "version": "1.0.0",
    "title": "Hexacom-Flask-Rest-API",
    "contact": {
      "email": "heinrichbangui@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Brands",
      "description": "API for accessing and adding brands"
    },
    {
      "name": "Job Orders",
      "description": "Example API for requesting and return book requests"
    },
    {
      "name": "Users",
      "description": "Example API for requesting and return book requests"
    }
  ],
  "paths": {
    "/brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "security": [
          "bearerAuth": []
        ],
        "summary": "Returns all brands available",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/brands"
            }
          }
        }
      }
    },
    "/brands/{name}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Return all brands available on the database",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "description": "Brand Name",
            "schema": {
              "$ref": "#/components/schemas/brand_name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/brandRequest"
            }
          },
          "400": {
            "description": "Invalid request."
          },
          "404": {
            "description": "Brand not found."
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Create a new brand",
        "parameters": [
          {
            "in": "path",
            "name": "brand_name",
            "required": true,
            "description": "Brand Name",
            "schema": {
              "$ref": "#/components/schemas/brand_name"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/brandRequest"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      },
      "delete": {
        "summary": "Delete a brand by name",
        "tags": [
          "Brands"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "brand_name",
            "required": true,
            "description": "Brand name",
            "schema": {
              "$ref": "#/components/schemas/brand_name"
            }
          }
        ]
      }
    },

    "/joborders/generate_uid": {
      "get": {
        "tags": [
          "Job Orders"
        ],
        "summary": "Generate a uuid",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Job Orders"
        ],
        "summary": "Create a new book request system",
        "requestBody": {
          "description": "Book Request Post Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bookRequestPostBody"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      },
      "delete": {
        "summary": "Delete Book Request by ID",
        "tags": [
          "Job Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Book Request Id",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          },
          "400": {
            "description": "Failed. Misunderstood Request."
          },
          "404": {
            "description": "Failed. Book Request not found."
          }
        }
      }
    },
    "/joborders": {
      "get": {
        "tags": [
          "Job Orders"
        ],
        "summary": "Returns all Job Orders",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/jobOrderRequest"
            }
          }
        }
      }
    },
    "/joborders/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the cat that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Job Orders"
        ],
        "summary": "Get book request with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Book Request id",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/bookRequest"
            }
          },
          "400": {
            "description": "Failed. Misunderstood Request."
          },
          "404": {
            "description": "Failed. Book request not found."
          }
        }
      },
      "post": {
        "tags": [
          "Job Orders"
        ],
        "summary": "Create a new book request system",
        "requestBody": {
          "description": "Book Request Post Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bookRequestPostBody"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      },
      "delete": {
        "summary": "Delete Book Request by ID",
        "tags": [
          "Job Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Book Request Id",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          },
          "400": {
            "description": "Failed. Misunderstood Request."
          },
          "404": {
            "description": "Failed. Book Request not found."
          }
        }
      }
    },

    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns all users",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/users"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Authenticate user",
        "requestBody": {
          "description": "User Post object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/bookRequests"
            }
          }
        }
      }
    },
    "/register": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns all brands available",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/bookRequests"
            }
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns all brands available",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/bookRequests"
            }
          }
        }
      }
    }

  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      },
      "security": [
        {
          "bearerAuth": []
        }
      ]
    },
    "schemas": {
      "id": {
        "properties": {
          "uuid": {
            "type": "string"
          }
        }
      },
      "loginRequestBody": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "format": "string"
          },
          "password": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "brandsRequests": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "format": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "bookRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "format": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "timestamp": {
            "type": "string",
            "format": "number"
          }
        }
      },
      "bookRequests": {
        "type": "object",
        "properties": {
          "bookRequest": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/bookRequest"
            }
          }
        }
      }
    }
  }
}